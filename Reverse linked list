//reverse a linked list 
#include<iostream>
using namespace std;

class Node{
      public:
         int data;
         Node *next;
      Node(int data){
        this -> data = data;
        this -> next = NULL;
      }
};
 
Node insertAthead(Node* &head,int d){ 
     
     Node* temp = new Node(d);
     temp->next = head;
     head = temp;

}

//method 3 recursive
void reverse(Node* &head,Node* curr,Node* prev){
   
   if(curr == NULL){
      head = prev;
      return ;
   }
   Node* forward = curr->next;
   reverse(head,forward,curr);
   curr->next = prev;
}
Node* reverselinkedlist(Node* head){
    Node* curr = head;
    Node* prev = NULL;
    reverse(head,curr,prev);
    return head;
}

//method 2 recursion
// Node* reverse(Node* head){
//    if(head == NULL || head->next ==NULL){
//       return head;
//    }
//    Node* chotahead = reverse(head->next);
//    head->next->next = head;
//    head->next = NULL;
//    return chotahead;
// }
// Node* reverselinkedlist(Node* head){
//      return reverse(head);
// }

// //method 1 reverse code
// Node* reverselinkedlist(Node *head){
//       //empty list & only head
//       if(head == NULL || head->next == NULL){
//          return head ;
//       }
//       else{ 
//       Node* prev = NULL;
//       Node* curr = head;
//       Node* forward =  NULL;
//       cout << " hiii" <<endl;
//       while(curr != NULL){      
//          forward = curr->next;
//          curr->next = prev;              
//          prev = curr;
//          curr = forward;
//       } 
//       return prev;
//       }
// }

void print(Node* &head){

   Node* temp = head;
    while(temp != NULL){
         cout << temp->data << " ";
         temp = temp->next;
    }
    cout << endl;
}
int main(){
  
  Node* head = new Node(5);
  //print(head);

  insertAthead(head,6);
  insertAthead(head,7);
  insertAthead(head,9);
  print(head);

head = reverselinkedlist(head);
  print(head);
  return 0;
}
